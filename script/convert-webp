#!/usr/bin/env ruby

# ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../Gemfile", __dir__)

# bundle_binstub = File.expand_path("bundle", __dir__)

# if File.file?(bundle_binstub)
#   if File.read(bundle_binstub, 300).include?("This file was generated by Bundler")
#     load(bundle_binstub)
#   else
#     abort("Your `bin/bundle` was not generated by Bundler, so this binstub cannot run.
# Replace `bin/bundle` by running `bundle binstubs bundler --force`, then run this command again.")
#   end
# end

# require "rubygems"
# require "bundler/setup"

require "fastimage"

force = false

class ImageFile
  def exists?
    File.exist?(file)
  end

  attr_reader :file
  def initialize(file)
    @file = file
  end

  def to_s = file

  def to_str = file

  def as(*suffixes)
    ext = suffixes.pop
    ImageFile.new("#{dirname}/#{([basename] + suffixes).join("-")}.#{ext}")
  end

  def as_webp = as("webp")

  def as_opt_jpg = as("opt", "jpg")

  def ext = File.extname(file)

  def basename = File.basename(file, ".*")

  def dirname = File.dirname(file)
end

module Cmd
  def self.run(cmd)
    puts cmd
    system cmd
  end

  def self.webp(img, force: false, quality: 90, tries: 0)
    dest = img.as_webp.to_s

    if force || !File.exist?(dest)
      cmd = "magick #{img}"

      opts = ["-define webp:method=6", "-quality #{quality}"]

      # Resize if width is specified and image is larger
      opts << "-resize 1200x" if FastImage.size(img.to_s)[0] > 1200

      # Lossless compression for images < 96kB
      if File.size?(img) && File.size(img) < 98_304 # 96kB
        opts << "-define webp:lossless=true"
      end

      opts << dest

      run "#{cmd} #{opts.join(" ")}"

      if File.size(dest) > 131_072 && # 128kB
          tries < 8
        webp(img, force: true, quality: quality - 5, tries: tries + 1)
      end
    end
  end

  def self.jpg(img, dest: nil, force: false, quality: 90, tries: 0)
    dest ||= img.as_opt_jpg.to_s
    if force || !File.exist?(dest)
      run "magick #{img} -strip -interlace Plane -quality #{quality}% #{dest}"

      if File.size(dest) > 131_072 && # 128kB
          tries < 8
        jpg(img, force: true, quality: quality - 5, tries: tries + 1)
      end
    end
  end
end

ARGV.each do |file|
  Dir.glob(file).each do |file|
    img = ImageFile.new(file)
    next unless %w[.jpg .jpeg .png].include?(img.ext)
    next if img.to_s.include?("-opt.jpg")
    Cmd.webp img, force: force
  end

  Dir.glob(file).each do |file|
    img = ImageFile.new(file)
    next unless %w[.jpg .jpeg].include?(img.ext)
    next if img.to_s.include?("-opt.jpg")
    next if File.size(img) < 32_768 # 32kB
    Cmd.jpg img, force: force
  end

  Dir.glob(file).each do |file|
    img = ImageFile.new(file)

    files = [img.as_webp.to_s, img.as_opt_jpg.to_s].filter { |f| File.exist?(f) }

    smallest = files.min { |a, b| File.size(a) <=> File.size(b) }
    files.each do |f|
      if f != smallest || File.size(f) > File.size(img.to_s)
        File.delete(f)
      end
    end
  end
end
