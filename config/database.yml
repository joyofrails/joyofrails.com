# SQLite. Versions 3.8.0 and up are supported.
#   gem install sqlite3
#
#   Ensure the SQLite 3 gem is defined in your Gemfile
#   gem "sqlite3"
#
default: &default
  encoding: utf8
  adapter: sqlite3
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 3 } %>
  timeout: 5000
  extensions:
    - SqliteExt::Ulid
    - SqliteExt::Vec

development:
  primary:
    <<: *default
    database: storage/development/data.sqlite3
    pragmas:
      mmap_size: <%= 128 * 1024 * 1024 %> # 128MB
  cache:
    <<: *default
    database: storage/development/cache.sqlite3
    migrations_paths: db/migrate_cache
    pragmas:
      mmap_size: <%= 64 * 1024 * 1024 %> # 64MB
  queue:
    <<: *default
    database: storage/development/queue.sqlite3
    migrations_paths: db/migrate_queue
    pragmas:
      mmap_size: <%= 64 * 1024 * 1024 %> # 64MB
  cable:
    <<: *default
    database: storage/development/cable.sqlite3
    migrations_paths: db/migrate_cable
    pragmas:
      mmap_size: <%= 16 * 1024 * 1024 %> # 16MB

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  primary:
    <<: *default
    database: storage/test/data.sqlite3
  cache:
    <<: *default
    database: storage/test/cache.sqlite3
    migrations_paths: db/migrate_cache
  queue:
    <<: *default
    database: storage/test/queue.sqlite3
    migrations_paths: db/migrate_queue
  cable:
    <<: *default
    database: storage/test/cable.sqlite3
    migrations_paths: db/migrate_cable

# SQLite3 write its data on the local filesystem, as such it requires
# persistent disks. If you are deploying to a managed service, you should
# make sure it provides disk persistence, as many don't.
#
# Similarly, if you deploy your application as a Docker container, you must
# ensure the database is located in a persisted volume.
production:
  primary:
    <<: *default
    database: storage/production/data.sqlite3
    pragmas:
      mmap_size: <%= 128 * 1024 * 1024 %> # 128MB
  cache:
    <<: *default
    database: storage/production/cache.sqlite3
    migrations_paths: db/migrate_cache
    pragmas:
      mmap_size: <%= 64 * 1024 * 1024 %> # 64MB
  queue:
    <<: *default
    database: storage/production/queue.sqlite3
    migrations_paths: db/migrate_queue
    pragmas:
      mmap_size: <%= 64 * 1024 * 1024 %> # 64MB
  cable:
    <<: *default
    database: storage/production/cable.sqlite3
    migrations_paths: db/migrate_cable
    pragmas:
      mmap_size: <%= 16 * 1024 * 1024 %> # 16MB
